alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']
length = len(alphabet) -1
output = []
inputstring = "Vrphwklqj phdqlqjixo"
for i in range(len(inputstring)):
    
    if inputstring[i].isalpha():
        index = alphabet.index(inputstring[i].lower())
        
        if index >= length-2:
            index = index - length - 1
        output.append(alphabet[index - 3])
    else:
        output.append(inputstring[i])
print ''.join(output)



--------------------------------------------------------------------------------------------------------------------------------------



        

#write a program (in python, javascript or ruby) to populate and then sort a randomly distributed list of 1 million integers, each 
integer having a value >= 1 and <= 100 without using any builtin/external library/function for sorting.your program should carefully 
consider the input and come up with the most efficient sorting solution you can think of. provide the space and time complexity of 
your algorithm

import random
numbers = [random.randint(1,100) for x in xrange(1000000)]
n = len(numbers)
def partition(arr,low,high): 
    i = ( low-1 )         # index of smaller element 
    pivot = arr[high]     # pivot 
  
    for j in range(low , high): 
        if   arr[j] <= pivot: 
            i = i+1 
            arr[i],arr[j] = arr[j],arr[i] 
  
    arr[i+1],arr[high] = arr[high],arr[i+1] 
    return ( i+1 ) 
def quickSort(arr,low,high): 
    if low < high: 
        pi = partition(arr,low,high) 
        quickSort(arr, low, pi-1) 
        quickSort(arr, pi+1, high) 

quickSort(numbers,0,n-1) 
print ("Sorted array is:") 
for i in range(n): 
    print ("%d" %numbers[i])


